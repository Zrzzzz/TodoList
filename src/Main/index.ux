<import name="page-main-item" src="./component/item-cell.ux"></import>
<import name="page-add" src="./component/add-view.ux"></import>
 

<template>
  <div class="page">

    <!-- 事项List -->
    <!-- TODO: 分类列表 -->
    <div class="page-main">
      <list class="item-list">

        <list-item type="header" class="page-header">
            <text>XiTodos</text>
        </list-item>

        <list-item type="text" if="{{beforeShow}}">
          <text class="sectionHeader">已过期</text>
        </list-item>
        <block for="{{listData}}" if="{{beforeShow}}">
          <list-item class="{{indexAdd === $idx ? 'show-item' : ''}}" if="{{(calcDate($item.end.date) === -1) && !$item.completed}}" type="item">
            <page-main-item item="{{$item}}" idx="{{$idx}}"></page-main-item>
          </list-item>
        </block>

        <list-item type="text" if="{{todayShow}}">
          <text class="sectionHeader">今日</text>
        </list-item>
        <block for="{{listData}}" if="{{todayShow}}">
          <list-item class="{{indexAdd === $idx ? 'show-item' : ''}}" if="{{(calcDate($item.end.date) === 0) && !$item.completed}}" type="item">
            <page-main-item item="{{$item}}" idx="{{$idx}}"></page-main-item>
          </list-item>
        </block>

        <list-item type="text" if="{{tmwShow}}">
          <text class="sectionHeader">明日</text>
        </list-item>
        <block for="{{listData}}" if="{{tmwShow}}">
          <list-item class="{{indexAdd === $idx ? 'show-item' : ''}}" if="{{(calcDate($item.end.date) === 1) && !$item.completed}}" type="item">
            <page-main-item item="{{$item}}" idx="{{$idx}}"></page-main-item>
          </list-item>
        </block>

        <list-item type="text" if="{{afterShow}}">
          <text class="sectionHeader">以后</text>
        </list-item>
        <block for="{{listData}}" if="{{afterShow}}">
          <list-item class="{{indexAdd === $idx ? 'show-item' : ''}}" if="{{(calcDate($item.end.date) === 2) && !$item.completed}}" type="item">
            <page-main-item item="{{$item}}" idx="{{$idx}}"></page-main-item>
          </list-item>
        </block>

        <list-item type="text" if="{{doneShow}}">
          <text class="sectionHeader">已完成</text>
        </list-item>
        <block for="{{listData}}" if="{{doneShow}}">
          <list-item class="{{indexAdd === $idx ? 'show-item' : ''}}" if="{{$item.completed}}" type="item">
            <page-main-item item="{{$item}}" idx="{{$idx}}"></page-main-item>
          </list-item>
        </block>
      </list>

    </div>

    <div class="new-btn" onclick="showDialog" show="{{!isShowingDialog}}">
      <image src="/Common/plus.png"></image>
    </div>

    <!-- 添加栏 -->
    <page-add></page-add>

    

  </div>
</template>

<style lang="less">
/* 页面采用竖向主轴 */
.page {
  display: flex;
  flex-direction: column;
  flex-shrink: 0;
  background-color: #f2f2f2;

  .page-main {
  display: flex;
  flex-direction: column;
  flex: 1;
  
    .page-header {
      display: flex;
      flex-direction: column;
      flex-shrink: 0;

      > text {
        line-height: 200px;
        font-size: 100px;
        color: #ead7d7;
        text-align: center;
      }
    }

    .item-list {
      flex: 1;
      margin: 0 50px 0 50px;

      .sectionHeader {
        color: #000000;
        font-size: 40px;
        line-height: 100px;
        font-weight: bold;
      }
    }

    .show-item {
      animation-name: showItem;
      animation-duration: 0.5s;
    }
  }
  
  /* 添加按钮 */
  .new-btn {
    position: fixed;
    right: 50px;
    bottom: 120px;

    > image {
      width: 100px;
      height: 100px;
    }
  }

}




@keyframes showItem {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}
</style>


<script>
import prompt from '@system.prompt'

export default {
  private: {
    // 数据列表
    listData: [
      {
        event: 'eat apple',
        completed: false,
        start: {
          date: '3月23日',
          time: '12:30'
        },
        end: {
          date: '3月23日',
          time: '12:30'
        }
      },
      {
        event: 'buy banana',
        completed: false,
        start: {
          date: '3月23日',
          time: '12:30'
        },
        end: {
          date: '3月23日',
          time: '12:30'
        }
      },
      {
        event: 'cut pear',
        completed: true,
        start: {
          date: '3月23日',
          time: '12:30'
        },
        end: {
          date: '3月23日',
          time: '12:30'
        }
      },
      {
        event: 'cdawdawd',
        completed: true,
        start: {
          date: '3月23日',
          time: '12:30'
        },
        end: {
          date: '3月23日',
          time: '12:30'
        }
      },
      {
        event: 'aaaaaaaaa',
        completed: true,
        start: {
          date: '3月23日',
          time: '12:30'
        },
        end: {
          date: '3月23日',
          time: '12:30'
        }
      },
      {
        event: 'bbbbbbbbb',
        completed: true,
        start: {
          date: '3月23日',
          time: '12:30'
        },
        end: {
          date: '3月23日',
          time: '12:30'
        }
      },
      {
        event: 'ccccccc',
        completed: true,
        start: {
          date: '3月23日',
          time: '12:30'
        },
        end: {
          date: '3月23日',
          time: '12:30'
        }
      }
    ],
    // 动态样式
    isInputting: false,
    // 最近一条InDex
    indexAdd: 0,

    // 是否在新建
    isShowingDialog: false,
  },
  computed: {
    beforeShow: {
      get() {
        var pend = false
        for (var i in this.listData) {
          if (this.calcDate(this.listData[i].end.date) === -1 && !this.listData[i].completed) {
            pend = true
            break
          }
        }
        return pend
      }
    },
    todayShow: {
      get() {
        var pend = false
        for (var i in this.listData) {
          if (this.calcDate(this.listData[i].end.date) === 0 && !this.listData[i].completed) {
            pend = true
            break
          }
        }
        return pend
      }
    },
    tmwShow: {
      get() {
        var pend = false
        for (var i in this.listData) {
          if (this.calcDate(this.listData[i].end.date) === 1 && !this.listData[i].completed) {
            pend = true
            break
          }
        }
        return pend
      }
    },
    afterShow: {
      get() {
        var pend = false
        for (var i in this.listData) {
          if (this.calcDate(this.listData[i].end.date) === 2 && !this.listData[i].completed) {
            pend = true
            break
          }
        }
        return pend
      }
    },
    doneShow: {
      get() {
        var pend = false
        for (var i in this.listData) {
          if (this.listData[i].completed === true) {
            pend = true
            break
          }
        }
        return pend
      }
    }
  },
  // 开始监听
  onInit() {
    // 改变状态
    this.$on('modifyStatus', (evt) => {
      const params = evt.detail
      let idx = params.idx
      this.listData[idx].completed = params.checked
      // 做完的排在下面
      // this.sortList()
    })
    // 删除
    this.$on('deleteEvent', (evt) => {
      this.listData.splice(evt.detail.idx, 1)
    })
    // 修改
    this.$on('modifyEvent', (evt) => {
      this.changeItem(evt.detail.idx)
    })

    // 添加栏隐藏
    this.$on('hideDialog', (evt) => {
      this.isShowingDialog = false
    })

    // 新增事项
    this.$on('addItem', (evt) => {
      var copyObj = JSON.parse(JSON.stringify(evt.detail.item))
      this.indexAdd = this.listData.length - 1
      while (this.indexAdd--) {
        if (!this.listData[this.indexAdd].completed)
          break
      }
      this.indexAdd++
      this.listData.splice(this.indexAdd, 0, copyObj)
    })

  },

  // 显示提示
  showHint(msg) {
    prompt.showToast({ message: msg })
  },

  // 显示对话框
  showDialog() {
    this.isShowingDialog = true
    this.$broadcast('showDialog')
  },

  // 更改事项
  changeItem(idx) {
    this.isShowingDialog = true
    this.$broadcast('modifyItem', {
      item: this.listData[idx]
    })
  },

  // 计算天数
  calcDate(aDate) {
    var date = new Date()
    const tD = date.getDate()
    const tM = date.getMonth() + 1
    date.setDate(date.getDate() + 1) // 往后一天
    const tmwM = date.getMonth() + 1
    const tmwD = date.getDate()
    try {
      const aM = Number(aDate.match(/(.+?)\D/)[1])
      const aD = Number(aDate.match(/\D(.+?)\D/)[1])

      if (aM < tM || aM === tM && aD < tD) {
        return -1
      } else if (aM === tM && aD === tD) {
        return 0
      } else if (aM === tmwM && aD === tmwD) {
        return 1
      } else {
        return 2
      }
    } catch {
      this.showHint('日期计算 error')
    }

  },

  // 整理列表
  sortList() {
    this.listData.sort(function (a, b) {
      if (a.completed === false && b.completed === true) {
        return -1
      } else {
        return 1
      }
    })
  }

}
</script>

