<import name="page-main-item" src="./component/item-cell.ux"></import>
<import name="page-add" src="./component/add-view.ux"></import>
 

<template>
  <div class="page">

    <!-- 事项List -->
    <div class="page-main">
      <!-- list组件 -->
      <list class="item-list">
        <!-- 头部 -->
        <list-item type="header" class="page-header">
          <text>XiTodos</text>
        </list-item>
        <!-- 事件列表 -->
        <block>
          <list-item type="text" if="{{beforeShow}}">
            <text class="sectionHeader">已过期</text>
          </list-item>
          <block for="{{listData}}" if="{{beforeShow}}">
            <list-item class="show-item" if="{{(calcDate($item.end.date, $item.end.time) === -1) && !$item.completed}}" type="item">
              <page-main-item item="{{$item}}" idx="{{$idx}}"></page-main-item>
            </list-item>
          </block>

          <list-item type="text" if="{{todayShow}}">
            <text class="sectionHeader">今日</text>
          </list-item>
          <block for="{{listData}}" if="{{todayShow}}">
            <list-item class="show-item" if="{{(calcDate($item.end.date, $item.end.time) === 0) && !$item.completed}}" type="item">
              <page-main-item item="{{$item}}" idx="{{$idx}}"></page-main-item>
            </list-item>
          </block>

          <list-item type="text" if="{{tmwShow}}">
            <text class="sectionHeader">明日</text>
          </list-item>
          <block for="{{listData}}" if="{{tmwShow}}">
            <list-item class="show-item" if="{{(calcDate($item.end.date, $item.end.time) === 1) && !$item.completed}}" type="item">
              <page-main-item item="{{$item}}" idx="{{$idx}}"></page-main-item>
            </list-item>
          </block>

          <list-item type="text" if="{{afterShow}}">
            <text class="sectionHeader">以后</text>
          </list-item>
          <block for="{{listData}}" if="{{afterShow}}">
            <list-item class="show-item" if="{{(calcDate($item.end.date, $item.end.time) === 2) && !$item.completed}}" type="item">
              <page-main-item item="{{$item}}" idx="{{$idx}}"></page-main-item>
            </list-item>
          </block>

          <list-item type="text" if="{{doneShow}}">
            <text class="sectionHeader">已完成</text>
          </list-item>
          <block for="{{listData}}" if="{{doneShow}}">
            <list-item class="show-item" if="{{$item.completed}}" type="item">
              <page-main-item item="{{$item}}" idx="{{$idx}}"></page-main-item>
            </list-item>
          </block>
        </block>
      </list>

    </div>
    <!-- 新建btn -->
    <div class="new-btn" onclick="showDialog" show="{{!isShowingDialog}}">
      <image src="/Common/plus.png"></image>
    </div>

    <!-- 添加栏 -->
    <page-add></page-add>

  </div>
</template>

<style lang="less">
/* 页面采用竖向主轴 */
.page {
  flex-direction: column;
  background-color: #f2f2f2;

  .page-main {
    display: flex;
    flex-direction: column;
    flex-grow: 1;

    .page-header {
      flex-direction: column;
      flex-shrink: 0;

      > text {
        line-height: 200px;
        font-size: 100px;
        color: #ead7d7;
        text-align: center;
      }
    }

    .item-list {
      flex: 1;
      margin: 0 50px;

      .sectionHeader {
        color: #000000;
        font-size: 40px;
        line-height: 100px;
        font-weight: bold;
      }
    }

    .show-item {
      animation-name: showItem;
      animation-duration: 300ms;
    }
  }

  /* 添加按钮 */
  .new-btn {
    position: fixed;
    right: 50px;
    bottom: 120px;

    > image {
      width: 100px;
      height: 100px;
    }
  }
}

@keyframes showItem {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}
</style>


<script>
import prompt from '@system.prompt'
import storage from '@system.storage'

export default {
  private: {
    // 数据列表
    listData: [],

    // 是否在新建
    isShowingDialog: false,
  },
  computed: {
    /* 存储几种模块的显示Bool */
    beforeShow: {
      get() {
        var pend = false
        for (var i in this.listData) {
          if (this.calcDate(this.listData[i].end.date) === -1 && !this.listData[i].completed) {
            pend = true
            break
          }
        }
        return pend
      }
    },
    todayShow: {
      get() {
        var pend = false
        for (var i in this.listData) {
          if (this.calcDate(this.listData[i].end.date) === 0 && !this.listData[i].completed) {
            pend = true
            break
          }
        }
        return pend
      }
    },
    tmwShow: {
      get() {
        var pend = false
        for (var i in this.listData) {
          if (this.calcDate(this.listData[i].end.date) === 1 && !this.listData[i].completed) {
            pend = true
            break
          }
        }
        return pend
      }
    },
    afterShow: {
      get() {
        var pend = false
        for (var i in this.listData) {
          if (this.calcDate(this.listData[i].end.date) === 2 && !this.listData[i].completed) {
            pend = true
            break
          }
        }
        return pend
      }
    },
    doneShow: {
      get() {
        var pend = false
        for (var i in this.listData) {
          if (this.listData[i].completed === true) {
            pend = true
            break
          }
        }
        return pend
      }
    }
  },
  /* 监听函数 和 数据读取 */
  onInit() {
    // 启动时读取数据
    this.loadData()

    /* 新增事件 */
    this.$on('addEvent', (evt) => {
      var copyObj = JSON.parse(JSON.stringify(evt.detail.item))
      if (this.listData.length !== 0) {
        var indexAdd = this.listData.length - 1
        while (indexAdd--) {
          if (!this.listData[indexAdd].completed)
            break
        }
        indexAdd++
      } else {
        indexAdd = 0
      }

      this.listData.splice(indexAdd, 0, copyObj)
    })

    /* 改变状态 */
    this.$on('modifyStatus', (evt) => {
      const params = evt.detail
      let idx = params.idx
      this.listData[idx].completed = params.checked
      this.saveData()
    })
    /* 删除事件 */
    this.$on('deleteEvent', (evt) => {
      this.listData.splice(evt.detail.idx, 1)
      this.saveData()
    })
    /* 修改事件 */
    this.$on('modifyEvent', (evt) => {
      this.isShowingDialog = true
      this.$broadcast('modifyItem', {
        item: Object.create(this.listData[evt.detail.idx]),
        idx: evt.detail.idx
      })
    })

    /* 修改完时间  */
    this.$on('modifiedEvent', (evt) => {
      this.listData.splice(evt.detail.idx, 1, evt.detail.item)
    })

    /* 隐藏添加栏时 */
    this.$on('hideDialog', (evt) => {
      this.isShowingDialog = false
      this.saveData()
    })

  },

  /* 提示信息 */
  showHint(msg) {
    prompt.showToast({ message: msg })
  },

  /* 显示对话框 */
  showDialog() {
    this.isShowingDialog = true
    this.$broadcast('showDialog')
  },

  /** 
   * @method calcDate
   * @param {string} aDate 时间
   * @param {string} aTime 日期
   * @return {number} -1是过期 0是今日 1是明日 2是以后
   */
  calcDate(aDate, aTime) {
    var date = new Date()
    // 这两个来判断今日结束事件是否过期的
    var endTime = aDate.replace(/[\u4e00-\u9fa5]/g, '.') + ' ' + aTime
    endTime = new Date(endTime).getTime()
    var nowTime = date.getTime()

    // 去掉小时分钟
    date = new Date(date.getFullYear() + '/' + (Number(date.getMonth()) + 1) + '/' + date.getDate()).getTime()
    aDate = new Date(aDate.replace(/[\u4e00-\u9fa5]/g, '.')).getTime()

    if (aDate < date || nowTime > endTime) {
      return -1
    } else if (aDate === date) {
      return 0
    } else if (aDate === date + 86400000) {
      return 1
    } else {
      return 2
    }
  },


  // 存储相关
  saveData() {
    this.setStorage('data', this.listData)
  },
  loadData() {
    let that = this
    this.getStorage('data').then((value) => {
      that.listData = value
      this.showHint('数据读取成功')
    })
  },
  setStorage(key, value) {
    let that = this
    // 设置storage
    storage.set({
      key,
      value: JSON.stringify(value),
      success() {
        that.showHint('数据存储成功')
      },
      fail(data, code) {
        that.showHint(`setStorage fail, code = ${code}`)
      }
    })
  },
  getStorage(key) {
    let that = this
    return new Promise((resolve, reject) => {
      // 获取storage
      storage.get({
        key,
        success(data) {
          if (data) {
            resolve(JSON.parse(data))
          }
        },
        fail(data, code) {
          that.showHint(`getStorage fail, code = ${code}`)
          reject({ data, code })
        }
      })
    })
  }

}
</script>

