<template>
  <!-- 添加栏 -->
  <div class="page-add {{isShowing ? 'show-dialog' : 'hide-dialog'}}">
    <div class="filter {{isShowing ? 'show-filter' : 'hide-filter'}}" if="{{isShowing}}" onclick="hideDialog(); cancelInputting();"></div>
    <div class="cancel-button">
      <text onclick="hideDialog(); cancelInputting();">取消</text>
    </div>
    <div class="new-item {{isInputting ? 'input-focus' : ''}}">
      <input id="textfield" class="input-text" type="text" placeholder="输入待办事项" enterkeytype="done" value="{{tmpItem.event}}" onchange="updateValue" onfocus="updateStatus" onblur="updateStatus" />
      <image src="/Common/microphone.png" class="voice-add-btn" ontouchstart="voiceInputStart" ontouchend="voiceInputStop"></image>
      <input class="text-add-btn" type="button" value="{{type === 0 ? '添加' : '修改'}}" onclick="type === 0 ? addItem() : changeItem()" />
    </div>
    <div class="time-set">
      <text>起始时间</text>
      <div class="date-picker">
        <picker class="picker" type="date" value="{{tmpItem.start.date}}" onchange="getStartDate"></picker>
        <picker class="picker" type="time" value="{{tmpItem.start.time}}" onchange="getStartTime"></picker>
      </div>
    </div>
    <div class="time-set">
      <text>完成时间</text>
      <div class="date-picker">
        <picker class="picker" type="date" value="{{tmpItem.end.date}}" onchange="getEndDate"></picker>
        <picker class="picker" type="time" value="{{tmpItem.end.time}}" onchange="getEndTime"></picker>
      </div>
    </div>
  </div>
</template>

<style lang="less">
.page-add {
  display: flex;
  flex-direction: column;
  border: 2px solid #000000;
  background-color: #ffffff;
  border-radius: 30px;

  position: fixed;
  width: 100%;
  bottom: 0px;

  .filter {
    position: fixed;
    width: 100%;
    top: 0;
    bottom: 324px;
    background-color: #6e6e6e;
    opacity: 0.2;
  }

  .cancel-button {
    flex-direction: row-reverse;
    > text {
      margin: 10px 30px 10px 0;
      color: #a52a2a;
    }
  }

  .new-item {
    height: 100px;
    border: 2px solid #ededed;
    background-color: #ffffff;
    align-items: center;
    border-radius: 25px;

    .input-text {
      flex-grow: 1;
      margin: 0 30px;
      
    }

    .voice-add-btn {
      flex-shrink: 0;
      width: 50px;
      font-weight: normal;
      background-color: transparent;
      margin: 10px;
      /* background-image: url('/Common/microphone.png'); */
    }

    .voice-add-btn:active {
      opacity: 0.5;
      /* background-color: #000000; */
    }

    .text-add-btn {
      flex-shrink: 0;
      width: 100px;
      font-weight: normal;
      color: #ffffff;
      border-radius: 50px;
      background-color: #ead7d7;
    }
  }

  .input-focus {
    border-color: #ead7d7;
  }

  .time-set {
    justify-content: space-around;
    /* flex-grow: 1; */
    flex-direction: column;

    > text {
      color: #a52a2a;
      width: 130px;
      background-color: rgb(192, 234, 241);
    }

    .date-picker {
      justify-content: space-around;
      .picker {
        background-color: #7fffd4;
      }
    }
  }
}

.show-dialog {
  animation-name: showDialog;
  animation-duration: 500ms;
  animation-fill-mode: forwards;
  animation-timing-function: ease-in-out;
}

.hide-dialog {
  animation-name: hideDialog;
  animation-duration: 500ms;
  animation-fill-mode: forwards;
  animation-timing-function: ease-in-out;
}

.show-filter {
  animation-name: showFilter;
  animation-duration: 500ms;
  animation-fill-mode: forwards;
  animation-timing-function: ease-in-out;
}

.hide-filter {
  animation-name: hideFilter;
  animation-duration: 500ms;
  animation-fill-mode: forwards;
  animation-timing-function: ease-in-out;
}

@keyframes showFilter {
  from {
    opacity: 0;
  }
  to {
    opacity: 0.2;
  }
}

@keyframes hideFilter {
  from {
    opacity: 0.2;
  }
  to {
    opacity: 0;
  }
}

@keyframes showDialog {
  from {
    transform: translateY(350px);
    opacity: 0;
  }
  to {
    transform: translateY(0px);
    opacity: 1;
  }
}

@keyframes hideDialog {
  from {
    transform: translateY(0px);
    opacity: 1;
  }
  to {
    transform: translateY(350px);
    opacity: 0;
  }
}
</style>

<script>
import prompt from '@system.prompt'
import asr from '@service.asr'

export default {
  data: {
    // 数据
    tmpItem: {
      event: '',
      completed: false,
      start: {
        date: '',
        time: ''
      },
      end: {
        date: '',
        time: ''
      }
    },

    // 是否显示当前页面
    isShowing: false,
    // 正在输入
    isInputting: false,
    // 新增为0，修改为1
    type: 0
  },
  onInit() {
    this.$on('showDialog', this.showboardevt)
    this.$on('modifyItem', this.modifyboardevt)
  },

  showboardevt(evt) {
    this.type = 0
    this.isShowing = true
    this.showDialog()
  },

  modifyboardevt(evt) {
    this.type = 1
    this.isShowing = true
    this.tmpItem = evt.detail.item
    this.showDialog()
  },

  showHint(msg) {
    prompt.showToast({ message: msg })
  },
  updateValue(evt) {
    this.tmpItem.event = evt.value
  },

  updateStatus() {
    this.isInputting = !this.isInputting
  },
  // 更改时间
  getStartTime(e) {
    this.tmpItem.start.time = e.hour + ':' + e.minute
  },
  getStartDate(e) {
    this.tmpItem.start.date = (e.month + 1) + '月' + e.day + '日'
  },
  getEndTime(e) {
    this.tmpItem.end.time = e.hour + ':' + e.minute
  },
  getEndDate(e) {
    this.tmpItem.end.date = (e.month + 1) + '月' + e.day + '日'
  },
  // 增加事项
  addItem() {
    if (this.tmpItem.event === '') {
      this.showHint('请输入文字后添加!')
    } else {
      this.cancelInputting()
      this.$dispatch('addItem', { item: this.tmpItem })
      this.hideDialog()
    }
  },

  changeItem() {
    if (this.tmpItem.event === '') {
      this.showHint('请输入文字后确认!')
    } else {
      this.cancelInputting()
      this.hideDialog()
    }
  },

  cancelInputting() {
    this.$element('textfield').focus({
      focus: false
    })
  },

  // 显示对话框
  showDialog() {
    // 给定初始日期 或者 用现成的
    if (this.type === 0) {
      this.setTime()
    }

    // 初始化语音模块
    let that = this
    asr.init({
      // 初始化成功后的回调函数
      success: function () {
        that.showHint('语音模块初始化成功')
      },
      // 初始化失败后的回调函数
      fail: function (data, code) {
        that.showHint(`语音模块初始化失败, code=${code}, data=${data}`)
      }
    })
    // 注册“部分识别”的响应函数，会在一次语音识别期间（asr.start 到 asr.stop 期间）被多次调用
    asr.onpartialresult = ({ result }) => {
      that.tmpItem.event = `${result}`
    }
    // 注册“语音识别停止”的响应函数，在一次语音识别完成后（asr.stop 时）被调用
    asr.oncompleteresult = ({ result }) => {
      that.tmpItem.event = `${result.match(/\[(.*)\]/)[1]}`
    }
    // 注册语音识别期间出现错误的响应函数，在出错后被调用
    asr.onerror = (error) => {
      that.showHint(`onerror: ${error}`)
    }


  },
  hideDialog() {
    this.$dispatch('hideDialog', { show: false })
    // tmpItem抛开引用
    this.tmpItem = Object.create(this.tmpItem)
    this.tmpItem.event = ''
    this.tmpItem.completed = false
    this.isShowing = false
    // 关闭语音模块
    let that = this
    asr.close({
      success: function () {
        that.showHint('语音模块已关闭')
      },
      fail: function (data, code) {
        that.showHint(`close fail, code=${code}, data=${data}`)
      }
    })
  },

  voiceInputStart() {
    let that = this
    // 开始一次语音识别
    that.tmpItem.event = ''
    asr.start({
      success: function () {
        that.showHint('开始识别')
      },
      fail: function (data, code) {
        that.showHint(`start fail, code=${code}, data=${data}`)
      }
    })
  },
  voiceInputStop() {
    let that = this
    // 停止当前语音识别
    asr.stop({
      success: function () {
        that.showHint('停止识别')
      },
      fail: function (data, code) {
        that.showHint(`start fail, code=${code}, data=${data}`)
      }
    })
  },

  setTime() {
    var date = new Date()
    var M = date.getMonth() + 1
    var D = date.getDate()
    var H = date.getHours()
    var m = date.getMinutes()
    this.tmpItem.start.date = M + '月' + D + '日'
    this.tmpItem.start.time = H + ':' + m
    date.setHours(date.getHours() + 1)

    M = date.getMonth() + 1
    D = date.getDate()
    H = date.getHours()
    m = date.getMinutes()
    this.tmpItem.end.date = M + '月' + D + '日'
    this.tmpItem.end.time = H + ':' + m
  }

}
</script>
