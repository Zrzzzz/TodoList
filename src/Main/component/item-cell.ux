<template>
  <div class="todo" onclick="sendItem(idx)">
    <!-- 第一行 包括状态 文字 删除按钮 -->
    <div class="line1">
      <div class="btn-check {{item.completed ? 'btn-checked' : ''}}" onclick="modifyItemStatus(idx)"></div>
      <text class="text {{item.completed ? 'line-through' : ''}}">{{item.event}}</text>
      <image class="btn" src="/Common/pictures/close.png" onclick="showHint('长按以删除')" onlongpress="deleteItem(idx)"></image>
    </div>
    <!-- 第二行 进度条 -->
    <progress type="horizontal" class="progress" style="color: {{dyColor}}; stroke-width: 12px;" percent="{{dyPercent}}"></progress>

  </div>
</template>

<style lang="less">
/* 删除线 */
.line-through {
  text-decoration: line-through;
  color: #cdcdcd;
}

/* 内容主体 */
.todo {
  flex-direction: column;
  flex-grow: 1;

  border: 3px solid #f1efef;
  background-color: #ffffff;
  border-radius: 20px;
  margin: 10px 0;
  /* 第一行 */
  .line1 {
    align-items: center;
    height: 100px;

    /* 两种形式check */
    .btn-check {
      flex-shrink: 0;
      width: 50px;
      height: 50px;
      margin: 25px;
      border-radius: 25px;
      border-width: 2px;
      border-color: #5e5e5e;
    }

    .btn-checked {
      flex-shrink: 0;
      margin: 25px;
      border-width: 0px;
      background-image: url("/Common/pictures/checked.png");
    }
    /* 文字部分 */
    .text {
      flex-grow: 1;
      font-size: 40px;
    }
    /* 删除按钮 */
    .btn {
      width: 60px;
      height: 60px;
      flex-shrink: 0;
      /* border-radius: 30px; */
      margin-right: 10px;
    }

    .btn:active {
      opacity: 0.5;
    }
  }
  /* 进度条 */
  .progress {
    padding: 10px 50px;
  }
}
</style>


<script>
import prompt from '@system.prompt'

export default {
  props: ['item', 'idx'],
  computed: {
    dyColor: {
      get() {
        const obj = this.calcStatus(this.item)
        if (obj.status === 1 || obj.status === 0) {
          return '#FFCC99'
        } else if (obj.status === -1) {
          return '#CC0033'
        } else {
          return '#4dc2af'
        }
      }
    },
    dyPercent: {
      get() {
        return this.calcStatus(this.item).percent
      }
    }
  },
  /* 显示提示 */
  showHint(msg) {
    prompt.showToast({ message: msg })
  },

  /* 修改状态 */
  modifyItemStatus(idx) {
    this.$dispatch('modifyStatus', { idx: idx, checked: !this.item.completed })
  },

  /* 删除事项 */
  deleteItem(idx) {
    this.showHint(`${this.item.event} 已删除`)
    this.$dispatch('deleteEvent', { idx: idx })
  },

  /* 发送该行idx 用于修改数据 */
  sendItem(idx) {
    this.$dispatch('modifyEvent', { idx: idx })
  },

  /**
   * @method calcStatus
   * @param {object} item
   * @return {object} 一个对象中包含status和percent
   * status 0 - 进行中
   *        1 - 未开始
   *        -1 - 超时
   *        2 - 已完成
   * 
   * percent 代表进度 超时和已完成为100 未开始是 0 进行中会自动计算
   */
  calcStatus(item) {
    var time = new Date().getTime()
    var startTime = item.start.date.replace(/[\u4e00-\u9fa5]/g, '.') + ' ' + item.start.time
    startTime = new Date(startTime).getTime()
    var endTime = item.end.date.replace(/[\u4e00-\u9fa5]/g, '.') + ' ' + item.end.time
    endTime = new Date(endTime).getTime()

    if (item.completed) {
      return {
        status: 2,
        percent: 100
      }
    } else if (time < startTime) {
      return {
        status: 1,
        percent: 0
      }
    } else if (time > endTime) {
      return {
        status: -1,
        percent: 100
      }
    } else {
      return {
        status: 0,
        percent: ((time - startTime) / (endTime - startTime)) * 100
      }
    }

  },

}
</script>